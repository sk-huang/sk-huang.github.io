<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[kotlin for android (一)]]></title>
      <url>/2017/11/10/2017-11-13/</url>
      <content type="html"><![CDATA[<h2 id="kotlin基础语法"><a href="#kotlin基础语法" class="headerlink" title="kotlin基础语法"></a>kotlin基础语法</h2><p>一句话概括kotlin：简洁，强大，安全</p>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><pre><code>val a: Int = 0    //简化 val a = 0  等同于 int a = 0  
val b: Int = a
var c: Byte = 1
var d: Short = 1
var e: Long = 1L
var f: Float = 1.0f
var g: Double = 1.0
var h: Char = &apos;1&apos;
val isBoolean = true
</code></pre><blockquote>
<p><em>val</em> : 定义一个只读属性<br><em>var</em> : 定义一个可变属性</p>
</blockquote>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>kotlin包名可以和路径名不一致，在引入kotlin文件时，以导入的包名为准,默认是 <code>kotlin.*</code></p>
<h3 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> var a: String = <span class="string">""</span></div><div class="line">    constructor() &#123;&#125;</div><div class="line">    constructor(a: String) &#123;</div><div class="line">        <span class="keyword">this</span>.a = a</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意构造方法的关键字是<code>constructor</code></p>
<h3 id="方法的创建"><a href="#方法的创建" class="headerlink" title="方法的创建"></a>方法的创建</h3><p>所有的方法都得带上关键字<code>fun</code>，没个方法都得有返回类，空返回类型是<code>unit</code>，等同于java的<code>void</code>，可以省略</p>
<ul>
<li>有返回类型<ul>
<li>方式一 <pre><code>  fun maxOf(a: Int, b: Int): Int {
    if (a &gt; b) {
        return a
    } else {
        return b
    }
}
</code></pre></li>
<li>方式二（简化）<pre><code>fun maxOf2(a: Int, b: Int) = if (a &gt; b) a else b
</code></pre></li>
</ul>
</li>
<li>无返回类型<ul>
<li>方式一   <pre><code>private fun unitSum(a: Int, b: Int): Unit {
   println(&quot;sum of $a and $b is ${a + b}&quot;)
}    
</code></pre></li>
<li>方式二             <pre><code> private fun unitSum(a: Int, b: Int){
   println(&quot;sum of $a and $b is ${a + b}&quot;)
}
</code></pre></li>
</ul>
</li>
</ul>
<p><em>String 中含有动态的值可以用$加变量名的方式直接写双引号里</em></p>
<h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p>判断语句基本和java类似，只是判断的条件表达式有点改进</p>
<h4 id="范围判断-数值"><a href="#范围判断-数值" class="headerlink" title="范围判断(数值)"></a>范围判断(数值)</h4><p>与 &amp;&amp;</p>
<pre><code>fun useRange() {
    val x = 10
    var y = 9
    y += 1
    if (x in 2..y) {  //等同于 x&gt;=2 &amp;&amp; x&lt;=y
        println(&quot;fits int range&quot;)
    }
}
</code></pre><p>或 ||</p>
<pre><code> fun useRange() {
    val x = 10
    var y = 9
    y += 1
    if (x !in 2..y) {  //等同于 x&lt;2 &amp;&amp; x&gt;y
        println(&quot;fits int range&quot;)
    }
}
</code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><pre><code>fun iterating() {
    for (h in 1.rangeTo(4)) {
        println(h)
    //  Log.e(&quot;TAG&quot;, h.toString())
    }
}
    //rangeTo 升序 输出 1234
</code></pre><p><code>rangeTo</code>可以简写成<code>..</code></p>
<pre><code>fun iterating() {
        for (h in 1..4) {
            println(h)
        //  Log.e(&quot;TAG&quot;, h.toString())
        }
    }
    //rangeTo 升序 输出 1234



fun iterating() {
    for (h in 4.downTo(1)) {
        println(h)
    //  Log.e(&quot;TAG&quot;, h.toString())
    }
}
//downTo 降序序 输出 4321 
</code></pre><p><code>step</code>进阶关键字，根据后面的条件查找当前符合条件的值</p>
<pre><code>fun stepFor() {
    for (y in 1..10 step 3) {
        Log.d(&quot;tag&quot;, y.toString())
    }
}
// 输出1 4 7 10
</code></pre><h3 id="返回与跳出-标记"><a href="#返回与跳出-标记" class="headerlink" title="返回与跳出 @标记"></a>返回与跳出 @标记</h3><p>和java一样，使用关键字<code>return</code>，<code>break</code>，<code>continue</code>。在多层循环可以使用@标记当前循环体，以便针对此循环体做处理</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loopTest</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (j &gt; <span class="number">10</span>) &#123;</div><div class="line">                <span class="keyword">break</span><span class="symbol">@loop</span></div><div class="line">            &#125;</div><div class="line">            println(<span class="string">"<span class="variable">$j</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        println(<span class="string">"当前是第<span class="variable">$i</span> 次"</span>)</div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"结束了"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>@前面的标记名可以自定义</em></p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信调用返回的坑]]></title>
      <url>/2017/09/28/2017-09-28/</url>
      <content type="html"><![CDATA[<p>今天在做微信分享的时候，发现进入分享界面，什么都不做，直接返回，会有个微信的透明遮罩界面，得再返回一次就ok，通过调试，定位分析。最终查出问题所在：</p>
<p>微信的WXEntryActivity类，必须得实现<code>oncrete()</code>方法，否则不会进入回调方法 </p>
]]></content>
      
        <categories>
            
            <category> wechat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用DayNight主题和webview的冲突]]></title>
      <url>/2017/09/26/2017-09-26/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这几天在使用DayNight主题的时候碰到一个坑,看官方的介绍是WebView用DayNight主题无效，且会有一些适配啥的问题，但是并没有明确什么问题。而当我用webview + DayNight theme的时候，发现当前webview所在的activity每次初次打开会重绘一次。如果里面有请求且用了注解，会找不到view的id而崩溃</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>经过调试，发现daynight主题只有含有webview的activity才会重绘一次。而重绘之后上一次初始化的activity的信息会被带到oncreate的Bundle里</p>
<pre><code>protected void onCreate(@Nullable Bundle savedInstanceState)
</code></pre><p>而第一次初始化的activity会执行onDestroy()</p>
<p>所以目前有两种方案：</p>
<p>1.在回调地方这样判断</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="keyword">null</span> || <span class="keyword">this</span>.isDestroyed()) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>  <em>isDestroyed()是sdk 17以后才有的方法</em></p>
<p>2.强制不重绘，在manifast找到相应的activity加上以下属性</p>
<pre><code>android:configChanges=&quot;uiMode&quot;
</code></pre>]]></content>
      
        <categories>
            
            <category> DayNight </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DayNight </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android imageview scaleType 和 adjustViewBounds]]></title>
      <url>/2017/08/07/android-imageview-scaleType/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前在用imageloader，glide等图片加载框架加载图片时，很喜欢给imageview设的几个属性是</p>
<pre><code>android:scaleType=&quot;fitXY&quot;
android:layout_width=&quot;wrap_content&quot;
android:layout_height=&quot;wrap_content&quot;
</code></pre><p>这样可以在不同手机上显示原图的大小，特别是一些小图标的显示，这样做，按照高分辨率兼容低分率的情况可以不用管适配问题。</p>
<p>但是最近在项目里遇到一个问题，如果是一张超过部分手机分辨率的的大图，或者当前图片的宽高已然超过手机宽高，图片会变形。 即使设置<code>android:layout_width=&quot;match_parent&quot;</code>也一样</p>
<p>先来看下scaletype的几个属性，样例imageview宽高都是match_parent</p>
<h2 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h2><p><img src="/images/scale_type/fit_xy_adjustViewBounds.png" alt="&quot;加了adjustViewBounds&quot;"></p>
<h2 id="FIT-XY"><a href="#FIT-XY" class="headerlink" title="FIT_XY"></a>FIT_XY</h2><blockquote>
<p>Scale the image using FILL. </p>
</blockquote>
<p>把原图按照imageview的指定大小拉伸缩放图片，不按照比例。</p>
<p><img src="/images/scale_type/fit_xy.png" alt="fit_xy"></p>
<h2 id="CENTER"><a href="#CENTER" class="headerlink" title="CENTER"></a>CENTER</h2><blockquote>
<p>Center the image in the view, but perform no scaling.</p>
</blockquote>
<p>保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size，超过部分裁剪处理。</p>
<p><img src="/images/scale_type/center.png" alt="fit_center"></p>
<h2 id="CENTER-CROP"><a href="#CENTER-CROP" class="headerlink" title="CENTER_CROP"></a>CENTER_CROP</h2><blockquote>
<p>Scale the image uniformly (maintain the image’s aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).</p>
</blockquote>
<p>以填满整个ImageView为目的，将原图的中心对准ImageView的中心，等比例放大原图，直到填满ImageView为止（指的是ImageView的宽和高都要填满），原图超过ImageView的部分作裁剪处理 </p>
<p><img src="/images/scale_type/center_crop.png" alt="CENTER_CROP"></p>
<h2 id="CENTER-INSIDE"><a href="#CENTER-INSIDE" class="headerlink" title="CENTER_INSIDE"></a>CENTER_INSIDE</h2><blockquote>
<p>Scale the image uniformly (maintain the image’s aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding). </p>
</blockquote>
<p>以原图完全显示为目的，将图片的内容完整居中显示，通过按比例缩小原图的size宽(高)等于或小于ImageView的宽(高)。如果原图的size本身就小于ImageView的size，则原图的size不作任何处理，居中显示在ImageView。</p>
<p><img src="/images/scale_type/center_inside.png" alt="CENTER_INSIDE"></p>
<h2 id="FIT-CENTER"><a href="#FIT-CENTER" class="headerlink" title="FIT_CENTER"></a>FIT_CENTER</h2><blockquote>
<p>Scale the image using CENTER. </p>
</blockquote>
<p>把原图按比例扩大或缩小到ImageView的高度，居中显示</p>
<p><img src="/images/scale_type/fit_center.png" alt="FIT_CENTER"></p>
<h2 id="FIT-START"><a href="#FIT-START" class="headerlink" title="FIT_START"></a>FIT_START</h2><blockquote>
<p>Scale the image using START. </p>
</blockquote>
<p>把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的上部分位置</p>
<p><img src="/images/scale_type/fit_start.png" alt="FIT_START"></p>
<h2 id="FIT-END"><a href="#FIT-END" class="headerlink" title="FIT_END"></a>FIT_END</h2><blockquote>
<p>Scale the image using END.</p>
</blockquote>
<p>把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的下部分位置 </p>
<p><img src="/images/scale_type/fit_end.png" alt="FIT_END"></p>
<h2 id="MATRIX"><a href="#MATRIX" class="headerlink" title="MATRIX"></a>MATRIX</h2><blockquote>
<p>Scale using the image matrix when drawing. </p>
</blockquote>
<p>不改变原图的大小，从ImageView的左上角开始绘制原图，原图超过ImageView的部分作裁剪处理。</p>
<p><img src="/images/scale_type/matrix.png" alt="MATRIX"></p>
<h2 id="adjustViewBounds"><a href="#adjustViewBounds" class="headerlink" title="adjustViewBounds"></a>adjustViewBounds</h2><blockquote>
<p>Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable.</p>
<p>Note: If the application targets API level 17 or lower, adjustViewBounds will allow the drawable to shrink the view bounds, but not grow to fill available measured space in all cases. This is for compatibility with legacy MeasureSpec and RelativeLayout behavior.</p>
</blockquote>
<p>如果设置为true，允许imageview调整边界保持长宽比。 </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>加一个属性保持缩放比<code>android:adjustViewBounds=&quot;true&quot;</code>就好了</p>
<p>增加adjustViewBounds前<br><img src="/images/scale_type/fit_xy_not_adjustViewBounds.png" alt="&quot;没加adjustViewBounds&quot;"></p>
<p>增加adjustViewBounds后<br><img src="/images/scale_type/fit_xy_adjustViewBounds.png" alt="&quot;加了adjustViewBounds&quot;"></p>
<p>查阅资料，网上的说法是增加adjustViewBounds前不能单独使用，需要配合maxWidth或maxHeight一起使用。但是测试下来直接设置是有效的。 目前没有试上面说的targets 17以下的机型。</p>
<p>然后稍微看了下源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdjustViewBounds</span><span class="params">(<span class="keyword">boolean</span> adjustViewBounds)</span> </span>&#123;</div><div class="line">     mAdjustViewBounds = adjustViewBounds;</div><div class="line">     <span class="keyword">if</span> (adjustViewBounds) &#123;</div><div class="line">         setScaleType(ScaleType.FIT_CENTER);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>设置adjustViewBounds，会改变scaletype为fitcenter，当imageview的宽高小于等于图片宽高时，fitcenter和fitxy+AdjustViewBounds 效果类似，但是imageview的宽高大于图片宽高时，fitcenter会居中缩放显示，fitxy+AdjustViewBounds会从上面缩放显示</p>
<p>关于这个adjustViewBounds感觉还是得抽时间撸撸源码。</p>
]]></content>
      
        
        <tags>
            
            <tag> scaleType;adjustViewBounds </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用调试神器stetho碰到的一些问题]]></title>
      <url>/2017/07/12/stetho-develop/</url>
      <content type="html"><![CDATA[<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ul>
<li>Android 4.4 开始，默认的浏览器已经是 chrome 了，所以 webview 也是 chrome 了，这就给了 webview 远程调试的能力。我们需要在 Android 里针对 Webview 做以下设置：<pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
            WebView.setWebContentsDebuggingEnabled(true);
       }
</code></pre></li>
<li>打正式的混淆包有可能会碰到监听不了网络的情况，此时需要在Proguard里配置 <pre><code>-keep class com.facebook.stetho.** { *; }  
-dontwarn org.mozilla.javascript.**  
-dontwarn org.mozilla.classfile.**  
-keep class org.mozilla.javascript.** { *; } 
</code></pre></li>
<li>chrome远程调试按inspect后出现的界面为空白，应如何解决？ <ol>
<li>因为chrome inspect需要加载 <a href="https://chrome-devtools-frontend.appspot.com" target="_blank" rel="external">https://chrome-devtools-frontend.appspot.com</a> 上的资源，所以需要翻墙。</li>
<li>chrome://appcache-internals/# -&gt; remove cache -&gt; enjoy it</li>
</ol>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[入坑hexo独立博客]]></title>
      <url>/2017/07/04/create-hexo-blog/</url>
      <content type="html"><![CDATA[<h2 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h2><p>参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo文档</a>, 有能力直接看英文。</p>
<p><img src="/images/1435051044_500x500.png" alt=""></p>
<h2 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h2><p>在github上创建一个页面仓库，仓库名需要和账号对应， 格式为: yourname.github.io</p>
<p><img src="/images/git_name.png" alt=""></p>
<p><em>注意命名规则 : <code>xxx.github.io</code></em></p>
<h2 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置_config.yml"></a>全局配置_config.yml</h2><p>到了这里应该是hexo的工程已经创建完毕了，在之前<code>hexo init</code>创建的根目录。打开后在最下面的deploy节点添加一个repo和branch。</p>
<pre><code>deploy:
  type: git
  repo: 刚才创建的仓库地址.git
  branch: master
</code></pre><ul>
<li>repo: 刚刚github创库地址.git，如xxx.github.io.git</li>
<li>配置里所有的冒号后面得有一个空格</li>
</ul>
<h2 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h2><p>依次执行下列执行完成部署</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>此时可能会碰到<code>Deployer not found: git</code>的问题</p>
<p>执行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>重新deploy，等待命令窗执行</p>
<p>出现<code>INFO  Deploy done: git</code>即部署成功</p>
<p>点击 Github 上项目的 Settings，滑动到GitHub Pages，提示Your site is published at xxx.github.io</p>
<p>到了这一步，你可以使用xxx.github.io访问刚才部署的hexo静态网站</p>
<h2 id="映射绑定独立域名"><a href="#映射绑定独立域名" class="headerlink" title="映射绑定独立域名"></a>映射绑定独立域名</h2><h2 id="修改github-page-domain"><a href="#修改github-page-domain" class="headerlink" title="修改github page domain"></a>修改github page domain</h2><p>在刚才的setting里 , Custom domain 修改为买的域名。</p>
<h2 id="将域名绑定Github-Page的空间"><a href="#将域名绑定Github-Page的空间" class="headerlink" title="将域名绑定Github Page的空间"></a>将域名绑定Github Page的空间</h2><blockquote>
<p>方法一：在之前用hexo创建项目的source目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，如 iskay.me</p>
<p>方法二：在Repository的根目录下面，新建一个名为CNAME的文本文件，不要后缀名。里面写入你要绑定的域名, 如 iskay.me</p>
</blockquote>
<p>这里我使用的是第一种，到时候使用hexo命令部署会自动提交到远程仓库</p>
<h2 id="DNS设置"><a href="#DNS设置" class="headerlink" title="DNS设置"></a>DNS设置</h2><p>使用<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a>, 先注册dnspod，然后添加域名，让他自动添加后如下图</p>
<p><img src="/images/97L38ZX(09JXA08RD{2LJUA.png" alt="域名"></p>
<p>修改A 类型的记录值，改为github.io的ip，进入cmd ，ping <code>yourname.github.io</code>，得到ip复制进去。<br>修改 CNAME的记录值，改为你的github page的域名 <code>yourname.github.io</code>。<br>去你买域名的网站修改dns，改为记录类型为NS的那两个，保存</p>
<p>好了，等待吧。 也许半小时，也许几小时，等待云刷新。<br>然后，可以使用你的域名开心玩耍了</p>
<h2 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h2><p><a href="http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客</a><br><a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" target="_blank" rel="external">手把手教你建github技术博客by hexo</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo部署问题]]></title>
      <url>/2017/07/04/hexo-Error/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>cmd下执行<code>hexo d</code>时报错</p>
<pre><code>Error: spawn git ENOENT
    at exports._errnoException (util.js:746:11)
    at Process.ChildProcess._handle.onexit (child_process.js:1053:32)
    at child_process.js:1144:20
    at process._tickCallback (node.js:355:11)
</code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>把git的环境变量添加到path里去重启下cmd，就ok了</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
