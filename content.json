{"meta":{"title":"sk'blog","subtitle":null,"description":null,"author":"sk","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"shell字符串操作","slug":"2017-12-27","date":"2017-12-27T07:54:57.000Z","updated":"2017-12-27T08:38:38.004Z","comments":true,"path":"2017/12/27/2017-12-27/","link":"","permalink":"http://yoursite.com/2017/12/27/2017-12-27/","excerpt":"","text":"单引号echo &#39;this is a $string&#39; 单引号字符串的限制： 单引号里任何字符都会原样输出 单引号字符串里不能出现单引号（使用转义符也不行） 双引号str=&quot;world&quot;;echo &quot;hello,\\&quot;$str\\&quot;&quot; 双引号可以引用变量 双引号里可以有转义字符 拼接字符串str_1=&quot;test1&quot; str_2=&quot;$str_1,test2&quot; str_3=&quot;${str_1},test3&quot; echo $str_2 echo $str_3 获取字符串长度str=abcdef echo ${#str} #输出6 提取子字符串str=&quot;hello world!!!&quot; echo ${str:2} #从第2个字符开始截取后面 llo world!!! echo ${str:0:3} #从第=个字符开始，截取3个字符 hel 字符串比较A=&quot;$1&quot; # 如果$A是以“a”开头的字符串，那么为true if [[ &quot;$A&quot; == a* ]] then echo &quot;==&quot; else echo &quot;!=&quot; fi # 如果输入的参数是字符串&quot;a*&quot;,那么返回true if [[ &quot;$A&quot; == &quot;a*&quot; ]] then echo &quot;[==]&quot; else echo &quot;[!=]&quot; fi # 如果输入的参数是字符串&quot;a*&quot;,那么返回true if [ &quot;$A&quot; == &quot;a*&quot; ] then echo &quot;[==]&quot; else echo &quot;[!=]&quot; fi # 在当前文件夹中搜寻文件名，如果$A是以a开头的文件名，则返回true，注意如果有多个符合条件的文件名存在，会报参数太多的错误，只能有一个 if [ &quot;$A&quot; == a* ] then echo &quot;==&quot; else echo &quot;!=&quot; fi 传参的时候注意： 如果参数（不带引号）后缀+*，表示从当前目录搜索符合通配条件的文件名传入 如果带引号，则当成一个字符串处理传入","categories":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"","slug":"deeplink","date":"2017-12-15T05:41:31.554Z","updated":"2017-12-18T10:15:32.878Z","comments":true,"path":"2017/12/15/deeplink/","link":"","permalink":"http://yoursite.com/2017/12/15/deeplink/","excerpt":"","text":"测试intenthttp://www.test.com http://www.test.com/open www.test.com/open com.sk http.sk https.sk","categories":[],"tags":[]},{"title":"android studio 3.0 编译java工程报错","slug":"2017-12-14","date":"2017-12-14T07:54:57.000Z","updated":"2017-12-14T08:43:29.052Z","comments":true,"path":"2017/12/14/2017-12-14/","link":"","permalink":"http://yoursite.com/2017/12/14/2017-12-14/","excerpt":"","text":"错误提示Error:Gradle: java.util.concurrent.ExecutionException: java.util.concurrent.ExecutionException: com.android.tools.aapt2.Aapt2Exception: AAPT2 error: check logs for details 解决在 gradle.properties 里加入 android.enableAapt2=false关闭aapt2就好了","categories":[{"name":"as 3.0","slug":"as-3-0","permalink":"http://yoursite.com/categories/as-3-0/"}],"tags":[{"name":"as 3.0","slug":"as-3-0","permalink":"http://yoursite.com/tags/as-3-0/"}]},{"title":"Kotlin函数的默认参数和命名参数","slug":"2017-12-13","date":"2017-12-13T02:54:57.000Z","updated":"2017-12-13T08:49:21.617Z","comments":true,"path":"2017/12/13/2017-12-13/","link":"","permalink":"http://yoursite.com/2017/12/13/2017-12-13/","excerpt":"","text":"默认参数函数的参数可以有默认值，使用 = 定义默认值。 如： fun reformat(str: String, normalizeCase: Boolean = true, upperCaseFirstLetter: Boolean = true, divideByCamelHumps: Boolean = false, wordSeparator: Char = &#39; &#39;) { } 后面4个参数都有默认值，如果后面参数使用默认值，则可直接使用 reformat(&quot;test&quot;) 调用 当覆盖一个父类的方法时，总是使用父类的默认参数值。当覆盖一个带有默认值参数的父类方法时，必须从参数中省略默认的参数值： open class A { open fun test(i: Int = 10) { …… } } class B : A() { override fun test(i: Int) { …… } // 不能有默认值 } 命明参数可以在调用函数时，使用命名的函数参数。 如： fun reformat(str: String, normalizeCase: Boolean = true, upperCaseFirstLetter: Boolean = true, divideByCamelHumps: Boolean , wordSeparator: Char = &#39; &#39;) { } 第一个和第四个参数没有默认值，可以这样调用: reformat(str = &quot;a&quot;, normalizeCase = false, upperCaseFirstLetter = false, divideByCamelHumps = false, wordSeparator = &#39;b&#39;) 如果有想省略的参数可以这样调用： reformat(&quot;a&quot;, divideByCamelHumps = false) 如果一个默认参数在一个无默认值参数的前面，那么想使用改默认值只能通过 命名参数 调用： fun foo(bar: Int = 0, baz: Int) { /* …… */ } foo(baz = 1) // 使用默认值 bar = 0 当一个函数调用混用位置参数与命名参数时，所有位置参数都要放在第一个命名参数之前。 例如： fun f(x: Int = 1, z: Int = 1, y: Int) {} f(1, y = 2) //允许 f(x = 1, 2) //报错 f(x = 1, y = 2) //允许 小结 使用命名参数和默认参数可以很好的减少重载函数的数量，使代码更少更容易阅读 在调用 Java 函数时不能使用命名参数语法，因为 Java 字节码并不总是保留函数参数的名称","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"},{"name":"命名参数","slug":"命名参数","permalink":"http://yoursite.com/tags/命名参数/"}]},{"title":"databinding 自定义方法","slug":"2017-12-7","date":"2017-12-07T07:54:57.000Z","updated":"2017-12-07T07:12:24.353Z","comments":true,"path":"2017/12/07/2017-12-7/","link":"","permalink":"http://yoursite.com/2017/12/07/2017-12-7/","excerpt":"","text":"使用@BindingAdapter注解如下： java版： @BindingAdapter({&quot;bind:imageUrl&quot;}) public static void display(ImageView iv, String url) { Toast.makeText(iv.getContext(), &quot;_&quot; + url, Toast.LENGTH_SHORT).show(); Glide.with(iv.getContext()).load(url).into(iv); } kotlin版： (kotlin的companion object并不是真正的static，，在运行是他仍是实例对象的实例成员，而BindingAdapter需要一个真正的static，在jvm平台可以使用JvmStatic注解，使它成为一个真正的static) companion object { @BindingAdapter(&quot;bind:imageUrl&quot;) @JvmStatic fun displayIma(iv: ImageView, url: String) { Toast.makeText(iv.context, &quot;_&quot; + url, Toast.LENGTH_SHORT).show() Glide.with(iv.getContext()).load(url).into(iv); } } 然后在任意 xml 中引用 bind 的方法即可，只有当前 BindingAdapter 绑定的参数个数都满足才会触发(这里的 bind:imageUrl 中 bind 可以任意命名，xml可以不一致，主要是后面的参数名要一致)xml： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt; &lt;data&gt; &lt;variable name=&quot;list&quot; type=&quot;android.databinding.ObservableArrayList&amp;lt;String&amp;gt;&quot;&gt;&lt;/variable&gt; &lt;/data&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;android.support.constraint.ConstraintLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/imageView1&quot; android:layout_width=&quot;247dp&quot; android:layout_height=&quot;50dp&quot; android:contentDescription=&quot;iv1&quot; app:imageUrl=&quot;@{list[0]}&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.5&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt; &lt;/android.support.constraint.ConstraintLayout&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;/layout&gt;","categories":[{"name":"databinding","slug":"databinding","permalink":"http://yoursite.com/categories/databinding/"}],"tags":[{"name":"databinding","slug":"databinding","permalink":"http://yoursite.com/tags/databinding/"}]},{"title":"使用DataBinding总结（一）","slug":"2017-12-5","date":"2017-12-05T07:54:57.000Z","updated":"2017-12-07T07:10:56.863Z","comments":true,"path":"2017/12/05/2017-12-5/","link":"","permalink":"http://yoursite.com/2017/12/05/2017-12-5/","excerpt":"","text":"1 . xml 除 java.lang.* 的类，其他所有的用到的类都需要导入2 . 事件处理有两种方式： 方法引用 ： 引用所在类名::方法名 (使用该方法xml中调用的方法名签名必须和实际接口方法名签名一致，即参数类型，个数，返回类型一致) public class MyHandlers { public void onClickFriend(View view) { ... } } &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;data&gt; &lt;variable name=&quot;handlers&quot; type=&quot;com.example.MyHandlers&quot;/&gt; &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt; &lt;/data&gt; &lt;LinearLayout android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@{user.firstName}&quot; android:onClick=&quot;@{handlers::onClickFriend}&quot;/&gt; &lt;/LinearLayout&gt; &lt;/layout&gt; 事件绑定： 使用 lambda表达式(只要方法返回的类型一样就行，可以扩展参数) 下例中使用(v) -&gt; activity.removeList()去调用，如果没用到v的话可以省略，即 () -&gt; activity.removeList() 左侧括号里的参数是super向下传递的参数 //Activity fun removeList() { } //xml &lt;layout xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt; &lt;data&gt; &lt;variable name=&quot;v&quot; type=&quot;android.view.View&quot;&gt;&lt;/variable&gt; &lt;variable name=&quot;activity&quot; type=&quot;com.android.sk.databidingtest.bind.ListActivity&quot;&gt;&lt;/variable&gt; &lt;/data&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;Button android:id=&quot;@+id/bt_change_value&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:onClick=&quot;@{() -&gt; activity.removeList()}&quot; android:text=&quot;改变list&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.5&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/rv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:layout_constraintEnd_toEndOf=&quot;@+id/bt_change_value&quot; app:layout_constraintStart_toStartOf=&quot;@+id/bt_change_value&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/bt_change_value&quot;&gt;&lt;/android.support.v7.widget.RecyclerView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; &lt;/layout&gt; 3 . 在databinding中增加任何方法或者属性时，最好先compile一下，避免不自动生成","categories":[{"name":"databinding","slug":"databinding","permalink":"http://yoursite.com/categories/databinding/"}],"tags":[{"name":"databinding","slug":"databinding","permalink":"http://yoursite.com/tags/databinding/"}]},{"title":"kotlin for android (五)","slug":"2017-11-24","date":"2017-11-24T07:54:57.000Z","updated":"2017-12-05T11:03:58.604Z","comments":true,"path":"2017/11/24/2017-11-24/","link":"","permalink":"http://yoursite.com/2017/11/24/2017-11-24/","excerpt":"","text":"高阶函数高阶函数是将函数作为参数或者返回值的函数。 有一个很好的例子就是在多线程中，接收一个锁对象和一个函数，获取锁，运行函数，释放锁 实例： val lock = ReentrantLock() fun toBeSync(){ } lock(lock, ::toBeSync) fun &lt;T&gt; lock(lock: Lock, bod: () -&gt; T): T { lock.lock() try { return bod() } finally { lock.unlock() } } 调用还可以使用lambda表达式 lock(lock, { //doing }) 关于Lambda lambda 表达式总是被大括号括着； 其参数（如果有的话） 在 -&gt; 之前声明（参数类型可以省略） ； 函数体（如果存在的话） 在 -&gt; 后面。 在 Kotlin 中有一个约定，如果函数的最后一个参数是一个函数，并且你传递一个 lambda 表达式作为相应的参数，你可以在圆括号之外指定它： Lambda 表达式: lock(lock) { //doing }","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"}]},{"title":"kotlin for android (四)","slug":"2017-11-23","date":"2017-11-23T07:54:57.000Z","updated":"2017-12-05T11:02:19.912Z","comments":true,"path":"2017/11/23/2017-11-23/","link":"","permalink":"http://yoursite.com/2017/11/23/2017-11-23/","excerpt":"","text":"实用方法与技巧Say Goodbye to findViewById 在根目录的gradle文件中应用extensions插件 apply plugin: &#39;kotlin-android-extensions&#39; sync后就可以直接import当前的xml属性 import kotlinx.android.synthetic.main.activity_test1.* 使用如下//class import kotlinx.android.synthetic.main.activity_test1.* class TestKtActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_test1) tvText.text = &quot;test&quot; } } //xml &lt;Button android:id=&quot;@+id/tvText&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;hello，这是kotlin 测试&quot; /&gt; 分离java文件和kotlin文件 在java文件夹同级目录创建kotlin文件夹 在主module目录下的gradle文件中添加 sourceSets{ main.java.srcDirs += &quot;src/main/kotlin&quot; } 使用KotlinByteCode查看当前kotlin的生成源码Tools -&gt; Kotlin -&gt; KotlinByteCode， 在相应的kt文件点击decompile，可以知道当前.kt生成的 java 语句是否正确 使用插件自动将json转化pojo类plugin -&gt; JsonToKotlinClass 关键字、字符意义对照表https://kotlinlang.org/docs/reference/keyword-reference.html","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"}]},{"title":"kotlin for android (三)","slug":"2017-11-22","date":"2017-11-22T07:54:57.000Z","updated":"2017-12-07T06:30:27.894Z","comments":true,"path":"2017/11/22/2017-11-22/","link":"","permalink":"http://yoursite.com/2017/11/22/2017-11-22/","excerpt":"","text":"standard库几个特殊的系统函数apply 函数定义- public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T { block(); return this } 使用对象调用apply，可以在方法中使用this指代当前对象，可以省略。返回值为当前对象 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val array = arrayList.apply { add(&quot;d&quot;) add(&quot;e&quot;) remove(&quot;a&quot;) println(this) //[b, c, d, e] } println(arrayList) //[b, c, d, e] println(array) //[b, c, d, e] let 函数定义- public inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R = block(this) 使用对象调用let函数，在函数内可以使用it指代当前对象, 不可省略。返回值为最后一句或者指定的return表达式 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) arrayList.let { it.add(&quot;d&quot;) return@let it.add(&quot;e&quot;) it.remove(&quot;a&quot;) println(this) } println(&quot;$arrayList&quot;) //[a, b, c, d] with 函数定义- public inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R = receiver.block() with不是以对象的扩展函数存在，它是把对象当成参数来使用。在函数内使用this指代当前对象，可以省略。返回值为最后一句或者指定的return表达式 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val str = with(arrayList) { add(&quot;d&quot;) return@with &quot;array&quot; add(&quot;e&quot;) remove(&quot;a&quot;) println(this) } println(&quot;$arrayList&quot;) //[a, b, c, d] println(&quot;$str&quot;) //array runrun函数有两种一种是对象的扩展，一种是无对象 有对象调用的run 函数定义- public inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R = block() 使用对象调用run函数，在函数内使用this指代当前对象，可以省略。返回值为最后一句或者指定的return表达式 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val str = arrayList.run{ add(&quot;d&quot;) return@run &quot;array&quot; add(&quot;e&quot;) remove(&quot;a&quot;) println(this) } println(&quot;$arrayList&quot;) //[a, b, c, d] println(&quot;$str&quot;) //array 无对象调用的run 函数定义- public inline fun &lt;R&gt; run(block: () -&gt; R): R = block() 直接调用run函数，在函数内不能使用关键字指代当前对象。返回值为最后一句或者指定的return表达式 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val str = run { arrayList.add(&quot;d&quot;) return@run &quot;array&quot; arrayList.add(&quot;e&quot;) arrayList.add(&quot;a&quot;) println(this) } println(&quot;$arrayList&quot;) //[a, b, c, d] println(&quot;$str&quot;) //array also kotlin 1.1以后新增 函数定义- public inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T { block(this); return this } 使用对象调用also函数，在函数内使用it指代当前对象，不能省略。返回值为当前对象 实例： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val str = arrayList.also { it.add(&quot;d&quot;) return@also it.add(&quot;e&quot;) it.add(&quot;a&quot;) } println(&quot;$arrayList&quot;) //[a, b, c, d] println(&quot;$str&quot;) //[a, b, c, d] takeIf kotlin 1.1以后新增 函数定义- public inline fun &lt;T&gt; T.takeIf(predicate: (T) -&gt; Boolean): T? = if (predicate(this)) this else null 使用对象调用takeIf函数，在函数内使用it指代当前对象，不能省略。返回值根据最后一句话的boolean值或者return表达式返回的boolean值，如果true，返回当前对象，如果false，返回null 实例 var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val takeIf = arrayList.takeIf { it.add(&quot;e&quot;) return@takeIf false it.remove(&quot;f&quot;) } println(&quot;$takeIf&quot;) //null takeUnless 函数定义- public inline fun &lt;T&gt; T.takeUnless(predicate: (T) -&gt; Boolean): T? = if (!predicate(this)) this else null 和takeIf一样，只是返回值判断有所不同。返回值如果false，返回当前对象，如果true，null 实例 var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;b&quot;) arrayList.add(&quot;c&quot;) val takeIf = arrayList.takeUnless { it.add(&quot;e&quot;) return@takeUnless false it.remove(&quot;f&quot;) } println(&quot;$takeIf&quot;) //[a, b, c, e]","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"}]},{"title":"kotlin for android (二)","slug":"2017-11-21","date":"2017-11-21T07:54:57.000Z","updated":"2017-12-07T06:37:29.590Z","comments":true,"path":"2017/11/21/2017-11-21/","link":"","permalink":"http://yoursite.com/2017/11/21/2017-11-21/","excerpt":"","text":"app开发一个简单的功能，流程基本是： 渲染ui-&gt;请求网路-&gt;解析数据-&gt;设置ui控件 创建一个activityclass TestKtActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_test1) } override fun onStart() { super.onStart() } override fun onStop() { super.onStop() } override fun onDestroy() { super.onDestroy() } } 创建一个接口类//interface interface TestImpl { fun a() fun b(str: String) } //class class TestKtActivity : AppCompatActivity(), TestImpl { override fun b(str: String) { TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates. } override fun a() { TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates. } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_test1) tvText.text = &quot;test&quot; } } 如果实现了多个接口，方法有重名的冲突。解决如下： interface A { fun foo() { print(&quot;A&quot;) } fun bar() } interface B { fun foo() { print(&quot;B&quot;) } fun bar() { print(&quot;bar&quot;) } } class C : A { override fun bar() { print(&quot;bar&quot;) } } class D : A, B { override fun foo() { super&lt;A&gt;.foo() super&lt;B&gt;.foo() } override fun bar() { super&lt;B&gt;.bar() } } 创建一个抽象类（基类）abstract class BaseActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(getLayout()) init() } @LayoutRes abstract fun getLayout(): Int private fun init() { initListener() initData() } abstract fun initListener() internal abstract fun initData() override fun onStart() { super.onStart() } } 默认所有的类和成员属性都是final类型，如果想让该类被继承，可以使用open关键字Example: open class Outer { private val a = 1 protected open val b = 2 internal val c = 3 val d = 4 // public by default protected class Nested { public val e: Int = 5 } } class Subclass : Outer() { // a is not visible // b, c and d are visible // Nested and e are visible override val b = 5 // &#39;b&#39; is protected } class Unrelated(o: Outer) { // o.a, o.b are not visible // o.c and o.d are visible (same module) // Outer.Nested is not visible, and Nested::e is not visible either } 创建一个pojo类data class ktTest3(val name: String = &quot;&quot;, var pwd: String = &quot;&quot;, private var gender: String) 定义为data的类会自动实现getter()、setter()、toString()、hashcode等方法 如果属性修饰为val只读属性，只会生成getter()方法 如果属性修饰为var，会生成getter()、setter() 如果属性权限使用private，将不会生成getter()、setter()方法 通过Gson反序列化data class ktTest3(val name: String=&quot;&quot;, val pwd: String=&quot;&quot;) { override fun toString(): String { return &quot;ktTest3(name=&#39;$name&#39;, pwd=&#39;$pwd&#39;)&quot; } } val g = Gson() val k = g.fromJson( &quot;{\\n&quot; + &quot; \\&quot;name\\&quot;: \\&quot;sk\\&quot;,\\n&quot; + &quot; \\&quot;pwd\\&quot;: \\&quot;123\\&quot;\\n&quot; + &quot;}&quot;, ktTest3::class.java ) -::操作符 ： 创建一个成员引用或者一个类的引用 扩展函数(抽取utils，全局静态变量)一种可以在不继承父类，也不使用类似装饰器这样的设计模式的情况下对指定类进行扩展的函数 fun &lt;T&gt; ArrayList&lt;T&gt;.test(potion: Int, value: T) { this[potion] = value } this关键字作为对应的接受者对象 现在可以在任意地方调用ArrayList实例的test方法： var arrayList = ArrayList&lt;String&gt;() arrayList.add(&quot;a&quot;) arrayList.add(&quot;c&quot;) arrayList.add(&quot;c&quot;) arrayList.test(1, &quot;test&quot;) println(arrayList[1]) 扩展实际上没有修改它所扩展的类。定义一个扩展，并没有在类中插入一个新的成员，只是让这个类的实例对象能够通过.调用新的函数。 扩展函数是静态分发的，举个例子,它们并不是接受者类型的虚拟方法。这意味着扩展函数的调用时由发起函数调用的表达式的类型决定的，而不是在运行时动态获得的表达式的类型决定。 for example： open class C class D: C() fun C.foo() = &quot;c&quot; fun D.foo() = &quot;d&quot; fun printFoo(c: C) { println(c.foo()) } printFoo(D()) //输出结果为c 如果有同名同参数的成员函数和扩展函数，调用的时候必然会使用成员函数 比如： class C { fun foo() { println(&quot;member&quot;) } } fun C.foo() { println(&quot;extension&quot;) } //结果输出 member 如果扩展函数使用重载的方式同名不同参，调用的时候使用扩展函数 比如： class C { fun foo() { println(&quot;number&quot;) } } fun C.foo(i:Int) { println(&quot;extention&quot;) } //调用C().foo(1)输出 extention 对象表达式和声明(object) 有时候想对一个类做点小修改，又不想声明一个子类。java用匿名内部类解决这个问题，Kotlin 用对象表达式和对象声明实现这一概念 对象表达式使用object可以创建继承自匿名类的对象，比如： homeChannelAdapter?.setOnItemClickListener(object : HomeChannelAdapter.OnItemClickListener { override fun onItemClick(position: Int, advertiseBean: AdvertiseBean) { } }) 如果父类有构造函数，则必须传递相应的构造参数。多个父类可以用逗号隔开，跟在冒号后面： open class A(x: Int) { public open val y: Int = x } interface B { ... } val ab = object : A(1), B { override val y = 14 } 有时只是需要一个没有父类的对象，可以这样写: val adHoc = object { var x: Int = 0 var y: Int = 0 } print(adHoc.x + adHoc.y) 对象声明可以使用关键字object声明一个单例对象，如下： object SingleClass { val a: String = &quot;Str&quot; fun toDoing() { } } 然后就可以直接通过名字访问这个类： SingleClass.toDoing() 这样的类型可以有父类: object SingleClass : KtInterface { override val interfaceA: Boolean get() = TODO(&quot;not implemented&quot;) //To change initializer of created properties use File | Settings | File Templates. override val interfaceB: String get() = TODO(&quot;not implemented&quot;) //To change initializer of created properties use File | Settings | File Templates. val a: String = &quot;Str&quot; fun toDoing() { } } 注意：对象声明不可以是局部的(比如不可以直接在函数内部声明)，但可以在其它对象的声明或非内部类中进行内嵌入 伴随对象（全局静态常量）在类声明内部可以用 companion 关键字标记对象声明： class MyClass { companion object Factory { fun create(): MyClass = MyClass() } } 伴随对象的成员可以通过类名做限定词直接使用： val instance = MyClass.create() 在使用了 companion 关键字时，伴随对象的名字可以省略： class MyClass { companion object { } } 对象表达式和声明的区别 对象表达式在我们使用的地方立即初始化并执行的 对象声明是懒加载的，是在我们第一次访问时初始化的。 伴随对象是在对应的类加载时初始化的，和 Java 的静态初始是对应的。","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"}]},{"title":"kotlin for android (一)","slug":"2017-11-13","date":"2017-11-13T07:54:57.000Z","updated":"2017-12-06T03:53:06.573Z","comments":true,"path":"2017/11/13/2017-11-13/","link":"","permalink":"http://yoursite.com/2017/11/13/2017-11-13/","excerpt":"","text":"kotlin是现在的android官方语言。它是简洁的，强大的，安全的。与现存的android语言在运行时能够共同使用 kotlin基础语法基本类型 val : 定义一个只读属性var : 定义一个可变属性 val a: Int = 0 //简化 val a = 0 等同于 int a = 0 val b: Int = a var c: Byte = 1 var d: Short = 1 var e: Long = 1L var f: Float = 1.0f var g: Double = 1.0 var h: Char = &#39;1&#39; val isBoolean = true 权限修饰符-private — 当前类-protected — 当前类和子类-internal — 当前module-public — 默认值，全局 包kotlin包名可以和路径名不一致，在引入kotlin文件时，以导入的包名为准,默认是 kotlin.* 类的创建class TestClass { private var a: String = &quot;&quot; } 构造函数的创建kotlin中可以有一个主构造函数和一个或者多个次级构造函数，主构造函数是类头的一部分，一般跟在类名（或者可选的类型参数）后面。 class TestClass constructor(var name: String, var pwd: String) { } 如果主构造函数没有任何注解和任何修饰符可以省略constructor class TestClass (var name: String, var pwd: String) { } 通过decompile，观察其java实现： public TestClass(@NotNull String name, @NotNull String pwd) { Intrinsics.checkParameterIsNotNull(name, &quot;name&quot;); Intrinsics.checkParameterIsNotNull(pwd, &quot;pwd&quot;); super(); this.name = name; this.pwd = pwd; } 主构造函数不能包含任何逻辑代码，如果要加代码可以写在init方法里，或者写在次级constructor构造函数里 方式一 写在init{} 里 class TestClass constructor(var name: String, var pwd: String) { init { println(&quot;$name&quot;) } } 方式二 写在次级constructor 里 class TestClass { private var a: String = &quot;&quot; constructor() { } constructor(a: String) { this.a = a println(a) } } 如果一个类有一个主构造函数，每一个次构造函数必须委托给主构造函数，可以直接委托，或者间接委托，使用this关键字 class TestClass(var name: String) { constructor(name: String, pwd: String) : this(name) { } constructor(name: String, pwd: String, gender: String) : this(name, pwd) { } } 如果主构造函数属性修饰为val只读属性，只会生成getter()方法 如果主构造函属性修饰为var，会生成getter()、setter() 如果属性权限使用private或忽略，将不会生成getter()、setter()方法 方法的创建所有的方法都得带上关键字fun，没个方法都得有返回类，空返回类型是unit，等同于java的void，可以省略 有返回类型 方式一 fun maxOf(a: Int, b: Int): Int { if (a &gt; b) { return a } else { return b } } 方式二（简化） fun maxOf2(a: Int, b: Int) = if (a &gt; b) a else b 无返回类型 方式一 private fun unitSum(a: Int, b: Int): Unit { println(&quot;sum of $a and $b is ${a + b}&quot;) } 方式二 private fun unitSum(a: Int, b: Int){ println(&quot;sum of $a and $b is ${a + b}&quot;) } String 中含有动态的值可以用$加变量名的方式直接写双引号里 判断语句判断语句基本和java类似，只是判断的条件表达式有点改进，现在可以使用 == 操作符来判断两个字符串是否相等 范围判断(数值)与 &amp;&amp; fun useRange() { val x = 10 var y = 9 y += 1 if (x in 2..y) { //等同于 x&gt;=2 &amp;&amp; x&lt;=y println(&quot;fits int range&quot;) } } 或 || fun useRange() { val x = 10 var y = 9 y += 1 if (x !in 2..y) { //等同于 x&lt;2 &amp;&amp; x&gt;y println(&quot;fits int range&quot;) } } 循环语句简单数值类型 fun iterating() { for (h in 1.rangeTo(4)) { println(h) // Log.e(&quot;TAG&quot;, h.toString()) } } //rangeTo 升序 输出 1234 rangeTo可以简写成.. fun iterating() { for (h in 1..4) { println(h) // Log.e(&quot;TAG&quot;, h.toString()) } } //rangeTo 升序 输出 1234 fun iterating() { for (h in 4.downTo(1)) { println(h) // Log.e(&quot;TAG&quot;, h.toString()) } } //downTo 降序序 输出 4321 step进阶关键字，根据后面的条件查找当前符合条件的值 fun stepFor() { for (y in 1..10 step 3) { Log.d(&quot;tag&quot;, y.toString()) } } // 输出1 4 7 10 在kotlin中废除了for (初始; 条件; 增减)这个规则；若想实现上述功能，取而代之的，使用for (i in array.indices)语句。 indices为当前的下标数组，每次循环从当前下标开始。 例如： for (i in adList.indices) { Toast.makeText(mContext, &quot;$i&quot;, Toast.LENGTH_SHORT).show() } } 返回与跳出 (@标记)和java一样，使用关键字return，break，continue。在多层循环可以使用@标记当前循环体，以便针对此循环体做处理 fun loopTest() { loop@ for (i in 1..100) { for (j in 1..100) { if (j &gt; 10) { break@loop } println(&quot;$j&quot;) } println(&quot;当前是第$i 次&quot;) } println(&quot;结束了&quot;) } @前面的标记名可以自定义","categories":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/categories/kotlin/"}],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"http://yoursite.com/tags/kotlin/"}]},{"title":"数据结构 前缀，中缀，后缀表达式","slug":"2017-11-03","date":"2017-11-03T02:54:57.000Z","updated":"2017-12-07T07:28:54.063Z","comments":true,"path":"2017/11/03/2017-11-03/","link":"","permalink":"http://yoursite.com/2017/11/03/2017-11-03/","excerpt":"","text":"一般的数学运算表达式都是中缀表达式 中缀 a*(b+c)-d 前缀表达式又称波兰表达式， 其实是树的二叉树前序遍历 也可用栈的处理转换 如上面转换前缀 前缀数逆序读取 读取 前缀栈 栈1 d d 空 - d - ) d -) c dc -) + dc -)+ b dcb -)+ ( dcb+ - 双括号匹配抵消外侧操作符出栈 * dcb+ -* 加入的操作符&gt;=入栈，否则大的操作符出栈 a dcb+a -* \\ dcb+a*- -* 出栈 逆序输出 -*a+bcd 后缀数正序读取 读取 后缀栈 栈1 a a 空 * a * ( a *( b ab *( + ab *(+ c abc *(+ ) abc+ * 双括号匹配抵消内侧操作符出栈 - abc+ * 加入的操作符&gt;=入栈，否则大的操作符出栈,直到小于，小的入栈 d abc+*d - 结束 abc+*d- - 出栈 正序输出 abc+*d-","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/数据结构/"}],"tags":[{"name":"表达式","slug":"表达式","permalink":"http://yoursite.com/tags/表达式/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"微信调用返回的坑","slug":"2017-09-28","date":"2017-09-28T06:48:57.000Z","updated":"2017-09-28T07:06:39.592Z","comments":true,"path":"2017/09/28/2017-09-28/","link":"","permalink":"http://yoursite.com/2017/09/28/2017-09-28/","excerpt":"","text":"今天在做微信分享的时候，发现进入分享界面，什么都不做，直接返回，会有个微信的透明遮罩界面，得再返回一次就ok，通过调试，定位分析。最终查出问题所在： 微信的WXEntryActivity类，必须得实现oncrete()方法，否则不会进入回调方法","categories":[{"name":"wechat","slug":"wechat","permalink":"http://yoursite.com/categories/wechat/"}],"tags":[{"name":"微信","slug":"微信","permalink":"http://yoursite.com/tags/微信/"}]},{"title":"使用DayNight主题和webview的冲突","slug":"2017-09-26","date":"2017-09-26T02:47:57.000Z","updated":"2017-12-05T10:25:19.430Z","comments":true,"path":"2017/09/26/2017-09-26/","link":"","permalink":"http://yoursite.com/2017/09/26/2017-09-26/","excerpt":"","text":"问题这几天在使用DayNight主题的时候碰到一个坑,看官方的介绍是WebView用DayNight主题无效，且会有一些适配啥的问题，但是并没有明确什么问题。而当我用webview + DayNight theme的时候，发现当前webview所在的activity每次初次打开会重绘一次。如果里面有请求且用了注解，会找不到view的id而崩溃 解决方案经过调试，发现daynight主题只有含有webview的activity才会重绘一次。而重绘之后上一次初始化的activity的信息会被带到oncreate的Bundle里 protected void onCreate(@Nullable Bundle savedInstanceState) 而第一次初始化的activity会执行onDestroy() 所以目前有两种方案： 1.在回调地方这样判断 if (this == null || this.isDestroyed()) { return; } 注意 isDestroyed()是sdk 17以后才有的方法 2.强制不重绘，在manifast找到相应的activity加上以下属性 android:configChanges=&quot;uiMode&quot;","categories":[{"name":"DayNight","slug":"DayNight","permalink":"http://yoursite.com/categories/DayNight/"}],"tags":[{"name":"DayNight","slug":"DayNight","permalink":"http://yoursite.com/tags/DayNight/"}]},{"title":"android imageview scaleType 和 adjustViewBounds","slug":"android-imageview-scaleType","date":"2017-08-07T02:47:57.000Z","updated":"2017-08-07T09:59:39.143Z","comments":true,"path":"2017/08/07/android-imageview-scaleType/","link":"","permalink":"http://yoursite.com/2017/08/07/android-imageview-scaleType/","excerpt":"","text":"问题之前在用imageloader，glide等图片加载框架加载图片时，很喜欢给imageview设的几个属性是 android:scaleType=&quot;fitXY&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; 这样可以在不同手机上显示原图的大小，特别是一些小图标的显示，这样做，按照高分辨率兼容低分率的情况可以不用管适配问题。 但是最近在项目里遇到一个问题，如果是一张超过部分手机分辨率的的大图，或者当前图片的宽高已然超过手机宽高，图片会变形。 即使设置android:layout_width=&quot;match_parent&quot;也一样 先来看下scaletype的几个属性，样例imageview宽高都是match_parent 原图 FIT_XY Scale the image using FILL. 把原图按照imageview的指定大小拉伸缩放图片，不按照比例。 CENTER Center the image in the view, but perform no scaling. 保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size，超过部分裁剪处理。 CENTER_CROP Scale the image uniformly (maintain the image’s aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding). 以填满整个ImageView为目的，将原图的中心对准ImageView的中心，等比例放大原图，直到填满ImageView为止（指的是ImageView的宽和高都要填满），原图超过ImageView的部分作裁剪处理 CENTER_INSIDE Scale the image uniformly (maintain the image’s aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding). 以原图完全显示为目的，将图片的内容完整居中显示，通过按比例缩小原图的size宽(高)等于或小于ImageView的宽(高)。如果原图的size本身就小于ImageView的size，则原图的size不作任何处理，居中显示在ImageView。 FIT_CENTER Scale the image using CENTER. 把原图按比例扩大或缩小到ImageView的高度，居中显示 FIT_START Scale the image using START. 把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的上部分位置 FIT_END Scale the image using END. 把原图按比例扩大(缩小)到ImageView的高度，显示在ImageView的下部分位置 MATRIX Scale using the image matrix when drawing. 不改变原图的大小，从ImageView的左上角开始绘制原图，原图超过ImageView的部分作裁剪处理。 adjustViewBounds Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable. Note: If the application targets API level 17 or lower, adjustViewBounds will allow the drawable to shrink the view bounds, but not grow to fill available measured space in all cases. This is for compatibility with legacy MeasureSpec and RelativeLayout behavior. 如果设置为true，允许imageview调整边界保持长宽比。 解决方案加一个属性保持缩放比android:adjustViewBounds=&quot;true&quot;就好了 增加adjustViewBounds前 增加adjustViewBounds后 查阅资料，网上的说法是增加adjustViewBounds前不能单独使用，需要配合maxWidth或maxHeight一起使用。但是测试下来直接设置是有效的。 目前没有试上面说的targets 17以下的机型。 然后稍微看了下源码 public void setAdjustViewBounds(boolean adjustViewBounds) { mAdjustViewBounds = adjustViewBounds; if (adjustViewBounds) { setScaleType(ScaleType.FIT_CENTER); } } 设置adjustViewBounds，会改变scaletype为fitcenter，当imageview的宽高小于等于图片宽高时，fitcenter和fitxy+AdjustViewBounds 效果类似，但是imageview的宽高大于图片宽高时，fitcenter会居中缩放显示，fitxy+AdjustViewBounds会从上面缩放显示 关于这个adjustViewBounds感觉还是得抽时间撸撸源码。","categories":[],"tags":[{"name":"scaleType;adjustViewBounds","slug":"scaleType-adjustViewBounds","permalink":"http://yoursite.com/tags/scaleType-adjustViewBounds/"}]},{"title":"使用调试神器stetho碰到的一些问题","slug":"stetho-develop","date":"2017-07-12T07:58:06.000Z","updated":"2017-07-12T08:19:47.678Z","comments":true,"path":"2017/07/12/stetho-develop/","link":"","permalink":"http://yoursite.com/2017/07/12/stetho-develop/","excerpt":"","text":"问题汇总 Android 4.4 开始，默认的浏览器已经是 chrome 了，所以 webview 也是 chrome 了，这就给了 webview 远程调试的能力。我们需要在 Android 里针对 Webview 做以下设置： if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) { WebView.setWebContentsDebuggingEnabled(true); } 打正式的混淆包有可能会碰到监听不了网络的情况，此时需要在Proguard里配置 -keep class com.facebook.stetho.** { *; } -dontwarn org.mozilla.javascript.** -dontwarn org.mozilla.classfile.** -keep class org.mozilla.javascript.** { *; } chrome远程调试按inspect后出现的界面为空白，应如何解决？ 因为chrome inspect需要加载 https://chrome-devtools-frontend.appspot.com 上的资源，所以需要翻墙。 chrome://appcache-internals/# -&gt; remove cache -&gt; enjoy it","categories":[],"tags":[]},{"title":"入坑hexo独立博客","slug":"create-hexo-blog","date":"2017-07-04T10:00:36.000Z","updated":"2017-07-05T10:58:26.144Z","comments":true,"path":"2017/07/04/create-hexo-blog/","link":"","permalink":"http://yoursite.com/2017/07/04/create-hexo-blog/","excerpt":"","text":"前戏参考hexo文档, 有能力直接看英文。 关联github在github上创建一个页面仓库，仓库名需要和账号对应， 格式为: yourname.github.io 注意命名规则 : xxx.github.io 全局配置_config.yml到了这里应该是hexo的工程已经创建完毕了，在之前hexo init创建的根目录。打开后在最下面的deploy节点添加一个repo和branch。 deploy: type: git repo: 刚才创建的仓库地址.git branch: master repo: 刚刚github创库地址.git，如xxx.github.io.git 配置里所有的冒号后面得有一个空格 hexo部署依次执行下列执行完成部署 hexo g hexo d 此时可能会碰到Deployer not found: git的问题 执行 npm install hexo-deployer-git --save 重新deploy，等待命令窗执行 出现INFO Deploy done: git即部署成功 点击 Github 上项目的 Settings，滑动到GitHub Pages，提示Your site is published at xxx.github.io 到了这一步，你可以使用xxx.github.io访问刚才部署的hexo静态网站 映射绑定独立域名修改github page domain在刚才的setting里 , Custom domain 修改为买的域名。 将域名绑定Github Page的空间 方法一：在之前用hexo创建项目的source目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，如 iskay.me 方法二：在Repository的根目录下面，新建一个名为CNAME的文本文件，不要后缀名。里面写入你要绑定的域名, 如 iskay.me 这里我使用的是第一种，到时候使用hexo命令部署会自动提交到远程仓库 DNS设置使用DNSPod, 先注册dnspod，然后添加域名，让他自动添加后如下图 修改A 类型的记录值，改为github.io的ip，进入cmd ，ping yourname.github.io，得到ip复制进去。修改 CNAME的记录值，改为你的github page的域名 yourname.github.io。去你买域名的网站修改dns，改为记录类型为NS的那两个，保存 好了，等待吧。 也许半小时，也许几小时，等待云刷新。然后，可以使用你的域名开心玩耍了 参阅如何搭建一个独立博客手把手教你建github技术博客by hexo","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"hexo部署问题","slug":"hexo-Error","date":"2017-07-04T06:16:42.000Z","updated":"2017-07-04T06:38:15.974Z","comments":true,"path":"2017/07/04/hexo-Error/","link":"","permalink":"http://yoursite.com/2017/07/04/hexo-Error/","excerpt":"","text":"问题描述cmd下执行hexo d时报错 Error: spawn git ENOENT at exports._errnoException (util.js:746:11) at Process.ChildProcess._handle.onexit (child_process.js:1053:32) at child_process.js:1144:20 at process._tickCallback (node.js:355:11) 解决方法把git的环境变量添加到path里去重启下cmd，就ok了","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}